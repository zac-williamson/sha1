pub unconstrained fn get_decomposition<let BIT_WIDTH: u32>(input: u32) -> [u32; BIT_WIDTH] {
    let mut acc = input;
    let mut r: [u32; BIT_WIDTH] = [0; BIT_WIDTH];
    for i in 0..BIT_WIDTH {
        r[i] = acc & 1;
        acc = acc >> 1;
    }
    r
}

pub unconstrained fn compute_base4_conversion_table<let TABLE_ENTRIES: u32>() -> [u32; TABLE_ENTRIES] {
    let mut table: [u32; TABLE_ENTRIES] = [0; TABLE_ENTRIES];
    for i in 0..TABLE_ENTRIES {
        if (i & 1 == 1) {
            table[i] += 1;
        }
        if ((i >> 1) & 1 == 1) {
            table[i] += 4;
        }
        if ((i >> 2) & 1 == 1) {
            table[i] += 16;
        }
        if ((i >> 3) & 1 == 1) {
            table[i] += 64;
        }
        if ((i >> 4) & 1 == 1) {
            table[i] += 256;
        }
        if ((i >> 5) & 1 == 1) {
            table[i] += 1024;
        }
        if ((i >> 6) & 1 == 1) {
            table[i] += 4096;
        }
        if ((i >> 7) & 1 == 1) {
            table[i] += 16384;
        }
        if ((i >> 8) & 1 == 1) {
            table[i] += 65536;
        }
    }
    table
}


unconstrained fn compute_xor_decoding_table() {
    // num bits = 6

    let mut result: [Field; 4 * 4 * 4 * 4 * 4] = [0; 4 * 4 * 4 * 4 * 4];
    // for bit1 in 0..4 {
    //     let bit1out = ((bit1 & 1) == 1) as u32;
    for bit2 in 0..4 {
        let bit2out = ((bit2 & 1) == 1) as u32;
        for bit3 in 0..4 {
            let bit3out = ((bit3 & 1) == 1) as u32;
            for bit4 in 0..4 {
                let bit4out = ((bit4 & 1) == 1) as u32;
                for bit5 in 0..4 {
                    let bit5out = ((bit5 & 1) == 1) as u32;
                    for bit6 in 0..4 {
                        let bit6out = ((bit6 & 1) == 1) as u32;

                        // let mut index = bit1;
                        // index *= 7;
                        let mut index = bit2;
                        index *= 4;
                        index += bit3;
                        index *= 4;
                        index += bit4;
                        index *= 4;
                        index += bit5;
                        index *= 4;
                        index += bit6;

                        // let mut value = bit1out;
                        // value *= 2;
                        let mut value = bit2out;
                        value *= 2;
                        value += bit3out;
                        value *= 2;
                        value += bit4out;
                        value *= 2;
                        value += bit5out;
                        value *= 2;
                        value += bit6out;

                        result[index] = value as Field;
                    }
                }
            }
            // }
        }
    }
    println(
        f"pub global BASE4_XOR_DECODE_5BIT_TABLE: [Field; 1024] = {result}",
    );
}

/*
We need to evaluate: (b and c) or ((not b) and d)
We do this by doing the following:
1. Compute (on each base4-bit) `1 - d + c + b`. Map 0->1, 1->0, 2->0, 3->0
2. Compute (on each base4-bit) `c + d`        . Map 0->0, 1->0, 2->1, 3->0
3. Take the sum of 1 and 2. Result is  (b and c) or ((not b) and d)
| b | c | d | 1 -d + c + b|  table1out |  c + d | table2out | table1out + table2out
| 0 | 0 | 0 | 1         | 0          |  0     | 0         | 0
| 0 | 0 | 1 | 0         | 1          |  1     | 0         | 1
| 0 | 1 | 0 | 2         | 0          |  1     | 0         | 0
| 0 | 1 | 1 | 1         | 0          |  2     | 1         | 1
| 1 | 0 | 0 | 2         | 0          |  0     | 0         | 0
| 1 | 0 | 1 | 1         | 0          |  1     | 0         | 0
| 1 | 1 | 0 | 3         | 1          |  1     | 0         | 1
| 1 | 1 | 1 | 2         | 0          |  2     | 1         | 1
*/
unconstrained fn compute_phase1_decoding_table_A() {
    // num bits = 6
    // b + c - d
    let mut result: [Field; 4 * 4 * 4 * 4 * 4] = [0; 4 * 4 * 4 * 4 * 4];
    // for bit1 in 0..4 {
    //     let bit1out = ((bit1 & 1) == 1) as u32;
    for bit2 in 0..4 {
        let bit2out = ((bit2 == 0) | (bit2 == 3)) as u32;
        for bit3 in 0..4 {
            let bit3out = ((bit3 == 0) | (bit3 == 3)) as u32;
            for bit4 in 0..4 {
                let bit4out = ((bit4 == 0) | (bit4 == 3)) as u32;
                for bit5 in 0..4 {
                    let bit5out = ((bit5 == 0) | (bit5 == 3)) as u32;
                    for bit6 in 0..4 {
                        let bit6out = ((bit6 == 0) | (bit6 == 3)) as u32;

                        // let mut index = bit1;
                        // index *= 7;
                        let mut index = bit2;
                        index *= 4;
                        index += bit3;
                        index *= 4;
                        index += bit4;
                        index *= 4;
                        index += bit5;
                        index *= 4;
                        index += bit6;

                        // let mut value = bit1out;
                        // value *= 2;
                        let mut value = bit2out;
                        value *= 2;
                        value += bit3out;
                        value *= 2;
                        value += bit4out;
                        value *= 2;
                        value += bit5out;
                        value *= 2;
                        value += bit6out;

                        result[index] = value as Field;
                    }
                }
            }
            // }
        }
    }
    println(
        f"pub global BASE4_ROUND1_A_DECODE_5BIT_TABLE: [Field; 1024] = {result}",
    );
}


unconstrained fn compute_phase1_decoding_table_B() {
    // num bits = 6
    // !e & g
    // 2e + g -> 1 maps to 0
    let mut result: [Field; 4 * 4 * 4 * 4 * 4] = [0; 4 * 4 * 4 * 4 * 4];
    // for bit1 in 0..4 {
    //     let bit1out = ((bit1 & 1) == 1) as u32;
    for bit2 in 0..4 {
        let bit2out = ((bit2 == 2)) as u32;
        for bit3 in 0..4 {
        let bit3out = ((bit3 == 2)) as u32;
            for bit4 in 0..4 {
        let bit4out = ((bit4 == 2)) as u32;
                for bit5 in 0..4 {
        let bit5out = ((bit5 == 2)) as u32;
                    for bit6 in 0..4 {
        let bit6out = ((bit6 == 2)) as u32;

                        // let mut index = bit1;
                        // index *= 7;
                        let mut index = bit2;
                        index *= 4;
                        index += bit3;
                        index *= 4;
                        index += bit4;
                        index *= 4;
                        index += bit5;
                        index *= 4;
                        index += bit6;

                        // let mut value = bit1out;
                        // value *= 2;
                        let mut value = bit2out;
                        value *= 2;
                        value += bit3out;
                        value *= 2;
                        value += bit4out;
                        value *= 2;
                        value += bit5out;
                        value *= 2;
                        value += bit6out;

                        result[index] = value as Field;
                    }
                }
            }
            // }
        }
    }
    println(
        f"pub global BASE4_ROUND1_B_DECODE_5BIT_TABLE: [Field; 1024] = {result}",
    );
}

unconstrained fn compute_phase3_decoding_table() {
    // num bits = 6

    let mut result: [Field; 4 * 4 * 4 * 4 * 4] = [0; 4 * 4 * 4 * 4 * 4];
    // for bit1 in 0..4 {
    //     let bit1out = ((bit1 & 1) == 1) as u32;
    for bit2 in 0..4 {
        let bit2out = ((bit2 & 3) > 1) as u32;
        for bit3 in 0..4 {
            let bit3out = ((bit3 & 3) > 1) as u32;
            for bit4 in 0..4 {
                let bit4out = ((bit4 & 3) > 1) as u32;
                for bit5 in 0..4 {
                    let bit5out = ((bit5 & 3) > 1) as u32;
                    for bit6 in 0..4 {
                        let bit6out = ((bit6 & 3) > 1) as u32;

                        // let mut index = bit1;
                        // index *= 7;
                        let mut index = bit2;
                        index *= 4;
                        index += bit3;
                        index *= 4;
                        index += bit4;
                        index *= 4;
                        index += bit5;
                        index *= 4;
                        index += bit6;

                        // let mut value = bit1out;
                        // value *= 2;
                        let mut value = bit2out;
                        value *= 2;
                        value += bit3out;
                        value *= 2;
                        value += bit4out;
                        value *= 2;
                        value += bit5out;
                        value *= 2;
                        value += bit6out;

                        result[index] = value as Field;
                    }
                }
            }
            // }
        }
    }
    println(
        f"pub global BASE4_ROUND3_DECODE_5BIT_TABLE: [Field; 1024] = {result}",
    );
}

#[test]
fn print_xor_decoding_table() {
    //Safety:
    unsafe { compute_xor_decoding_table() };
}

#[test]
fn print_phase1_decoding_table_A() {
    //Safety:
    unsafe { compute_phase1_decoding_table_A() };
}

#[test]
fn print_phase1_decoding_table_B() {
    //Safety:
    unsafe { compute_phase1_decoding_table_B() };
}

#[test]
fn print_phase3_decoding_table() {
    //Safety:
    unsafe { compute_phase3_decoding_table() };
}

#[test]
fn make_table() {
    // Safety: no need to constrain this we're just computing+printing lookup table values
    unsafe {
        let t7 = compute_base4_conversion_table::<256>();

        println(f"pub global BASE4_ENCODE_8BIT_TABLE: [Field; 256] = {t7};");
    }
}

pub global BASE4_ENCODE_8BIT_TABLE: [Field; 256] = [0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85, 256, 257, 260, 261, 272, 273, 276, 277, 320, 321, 324, 325, 336, 337, 340, 341, 1024, 1025, 1028, 1029, 1040, 1041, 1044, 1045, 1088, 1089, 1092, 1093, 1104, 1105, 1108, 1109, 1280, 1281, 1284, 1285, 1296, 1297, 1300, 1301, 1344, 1345, 1348, 1349, 1360, 1361, 1364, 1365, 4096, 4097, 4100, 4101, 4112, 4113, 4116, 4117, 4160, 4161, 4164, 4165, 4176, 4177, 4180, 4181, 4352, 4353, 4356, 4357, 4368, 4369, 4372, 4373, 4416, 4417, 4420, 4421, 4432, 4433, 4436, 4437, 5120, 5121, 5124, 5125, 5136, 5137, 5140, 5141, 5184, 5185, 5188, 5189, 5200, 5201, 5204, 5205, 5376, 5377, 5380, 5381, 5392, 5393, 5396, 5397, 5440, 5441, 5444, 5445, 5456, 5457, 5460, 5461, 16384, 16385, 16388, 16389, 16400, 16401, 16404, 16405, 16448, 16449, 16452, 16453, 16464, 16465, 16468, 16469, 16640, 16641, 16644, 16645, 16656, 16657, 16660, 16661, 16704, 16705, 16708, 16709, 16720, 16721, 16724, 16725, 17408, 17409, 17412, 17413, 17424, 17425, 17428, 17429, 17472, 17473, 17476, 17477, 17488, 17489, 17492, 17493, 17664, 17665, 17668, 17669, 17680, 17681, 17684, 17685, 17728, 17729, 17732, 17733, 17744, 17745, 17748, 17749, 20480, 20481, 20484, 20485, 20496, 20497, 20500, 20501, 20544, 20545, 20548, 20549, 20560, 20561, 20564, 20565, 20736, 20737, 20740, 20741, 20752, 20753, 20756, 20757, 20800, 20801, 20804, 20805, 20816, 20817, 20820, 20821, 21504, 21505, 21508, 21509, 21520, 21521, 21524, 21525, 21568, 21569, 21572, 21573, 21584, 21585, 21588, 21589, 21760, 21761, 21764, 21765, 21776, 21777, 21780, 21781, 21824, 21825, 21828, 21829, 21840, 21841, 21844, 21845];
pub global BASE4_XOR_DECODE_5BIT_TABLE: [Field; 1024] = [0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x06, 0x07, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x08, 0x09, 0x08, 0x09, 0x0a, 0x0b, 0x0a, 0x0b, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0f, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x12, 0x13, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x16, 0x17, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x18, 0x19, 0x18, 0x19, 0x1a, 0x1b, 0x1a, 0x1b, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x1e, 0x1f];
pub global BASE4_ROUND1_A_DECODE_5BIT_TABLE: [Field; 1024] = [0x1f, 0x1e, 0x1e, 0x1f, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1f, 0x1e, 0x1e, 0x1f, 0x1b, 0x1a, 0x1a, 0x1b, 0x19, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x19, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x1b, 0x1a, 0x1a, 0x1b, 0x1f, 0x1e, 0x1e, 0x1f, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1f, 0x1e, 0x1e, 0x1f, 0x17, 0x16, 0x16, 0x17, 0x15, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x17, 0x16, 0x16, 0x17, 0x13, 0x12, 0x12, 0x13, 0x11, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x13, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x11, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x13, 0x12, 0x12, 0x13, 0x17, 0x16, 0x16, 0x17, 0x15, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x17, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x15, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x17, 0x16, 0x16, 0x17, 0x13, 0x12, 0x12, 0x13, 0x11, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x13, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x11, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x13, 0x12, 0x12, 0x13, 0x17, 0x16, 0x16, 0x17, 0x15, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x17, 0x16, 0x16, 0x17, 0x1f, 0x1e, 0x1e, 0x1f, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1f, 0x1e, 0x1e, 0x1f, 0x1b, 0x1a, 0x1a, 0x1b, 0x19, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x19, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x1b, 0x1a, 0x1a, 0x1b, 0x1f, 0x1e, 0x1e, 0x1f, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1f, 0x1e, 0x1e, 0x1f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0f, 0x0e, 0x0e, 0x0f, 0x0b, 0x0a, 0x0a, 0x0b, 0x09, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x09, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x0b, 0x0a, 0x0a, 0x0b, 0x0f, 0x0e, 0x0e, 0x0f, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0f, 0x0e, 0x0e, 0x0f, 0x07, 0x06, 0x06, 0x07, 0x05, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x07, 0x06, 0x06, 0x07, 0x03, 0x02, 0x02, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x03, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x03, 0x02, 0x02, 0x03, 0x07, 0x06, 0x06, 0x07, 0x05, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x07, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x05, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x07, 0x06, 0x06, 0x07, 0x03, 0x02, 0x02, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x03, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x03, 0x02, 0x02, 0x03, 0x07, 0x06, 0x06, 0x07, 0x05, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x07, 0x06, 0x06, 0x07, 0x0f, 0x0e, 0x0e, 0x0f, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0f, 0x0e, 0x0e, 0x0f, 0x0b, 0x0a, 0x0a, 0x0b, 0x09, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x09, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x0b, 0x0a, 0x0a, 0x0b, 0x0f, 0x0e, 0x0e, 0x0f, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0f, 0x0e, 0x0e, 0x0f, 0x0b, 0x0a, 0x0a, 0x0b, 0x09, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x09, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x0b, 0x0a, 0x0a, 0x0b, 0x0f, 0x0e, 0x0e, 0x0f, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0f, 0x0e, 0x0e, 0x0f, 0x07, 0x06, 0x06, 0x07, 0x05, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x07, 0x06, 0x06, 0x07, 0x03, 0x02, 0x02, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x03, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x03, 0x02, 0x02, 0x03, 0x07, 0x06, 0x06, 0x07, 0x05, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x07, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x05, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x07, 0x06, 0x06, 0x07, 0x03, 0x02, 0x02, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x03, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x03, 0x02, 0x02, 0x03, 0x07, 0x06, 0x06, 0x07, 0x05, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x07, 0x06, 0x06, 0x07, 0x0f, 0x0e, 0x0e, 0x0f, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0f, 0x0e, 0x0e, 0x0f, 0x0b, 0x0a, 0x0a, 0x0b, 0x09, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x09, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x0b, 0x0a, 0x0a, 0x0b, 0x0f, 0x0e, 0x0e, 0x0f, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0f, 0x0e, 0x0e, 0x0f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1f, 0x1e, 0x1e, 0x1f, 0x1b, 0x1a, 0x1a, 0x1b, 0x19, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x19, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x1b, 0x1a, 0x1a, 0x1b, 0x1f, 0x1e, 0x1e, 0x1f, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1f, 0x1e, 0x1e, 0x1f, 0x17, 0x16, 0x16, 0x17, 0x15, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x17, 0x16, 0x16, 0x17, 0x13, 0x12, 0x12, 0x13, 0x11, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x13, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x11, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x13, 0x12, 0x12, 0x13, 0x17, 0x16, 0x16, 0x17, 0x15, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x17, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x15, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x17, 0x16, 0x16, 0x17, 0x13, 0x12, 0x12, 0x13, 0x11, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x13, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x11, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x13, 0x12, 0x12, 0x13, 0x17, 0x16, 0x16, 0x17, 0x15, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x17, 0x16, 0x16, 0x17, 0x1f, 0x1e, 0x1e, 0x1f, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1f, 0x1e, 0x1e, 0x1f, 0x1b, 0x1a, 0x1a, 0x1b, 0x19, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x19, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x1b, 0x1a, 0x1a, 0x1b, 0x1f, 0x1e, 0x1e, 0x1f, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1f, 0x1e, 0x1e, 0x1f];
pub global BASE4_ROUND1_B_DECODE_5BIT_TABLE: [Field; 1024] = [0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x06, 0x06, 0x07, 0x06, 0x04, 0x04, 0x05, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x06, 0x06, 0x07, 0x06, 0x04, 0x04, 0x05, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x08, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x0a, 0x0b, 0x0a, 0x08, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x0a, 0x0b, 0x0a, 0x08, 0x08, 0x09, 0x08, 0x0c, 0x0c, 0x0d, 0x0c, 0x0c, 0x0c, 0x0d, 0x0c, 0x0e, 0x0e, 0x0f, 0x0e, 0x0c, 0x0c, 0x0d, 0x0c, 0x08, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x0a, 0x0b, 0x0a, 0x08, 0x08, 0x09, 0x08, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x06, 0x06, 0x07, 0x06, 0x04, 0x04, 0x05, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x06, 0x06, 0x07, 0x06, 0x04, 0x04, 0x05, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x06, 0x06, 0x07, 0x06, 0x04, 0x04, 0x05, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x08, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x0a, 0x0b, 0x0a, 0x08, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x0a, 0x0b, 0x0a, 0x08, 0x08, 0x09, 0x08, 0x0c, 0x0c, 0x0d, 0x0c, 0x0c, 0x0c, 0x0d, 0x0c, 0x0e, 0x0e, 0x0f, 0x0e, 0x0c, 0x0c, 0x0d, 0x0c, 0x08, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x0a, 0x0b, 0x0a, 0x08, 0x08, 0x09, 0x08, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x06, 0x06, 0x07, 0x06, 0x04, 0x04, 0x05, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x10, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x12, 0x12, 0x13, 0x12, 0x10, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x12, 0x12, 0x13, 0x12, 0x10, 0x10, 0x11, 0x10, 0x14, 0x14, 0x15, 0x14, 0x14, 0x14, 0x15, 0x14, 0x16, 0x16, 0x17, 0x16, 0x14, 0x14, 0x15, 0x14, 0x10, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x12, 0x12, 0x13, 0x12, 0x10, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x12, 0x12, 0x13, 0x12, 0x10, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x12, 0x12, 0x13, 0x12, 0x10, 0x10, 0x11, 0x10, 0x14, 0x14, 0x15, 0x14, 0x14, 0x14, 0x15, 0x14, 0x16, 0x16, 0x17, 0x16, 0x14, 0x14, 0x15, 0x14, 0x10, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x12, 0x12, 0x13, 0x12, 0x10, 0x10, 0x11, 0x10, 0x18, 0x18, 0x19, 0x18, 0x18, 0x18, 0x19, 0x18, 0x1a, 0x1a, 0x1b, 0x1a, 0x18, 0x18, 0x19, 0x18, 0x18, 0x18, 0x19, 0x18, 0x18, 0x18, 0x19, 0x18, 0x1a, 0x1a, 0x1b, 0x1a, 0x18, 0x18, 0x19, 0x18, 0x1c, 0x1c, 0x1d, 0x1c, 0x1c, 0x1c, 0x1d, 0x1c, 0x1e, 0x1e, 0x1f, 0x1e, 0x1c, 0x1c, 0x1d, 0x1c, 0x18, 0x18, 0x19, 0x18, 0x18, 0x18, 0x19, 0x18, 0x1a, 0x1a, 0x1b, 0x1a, 0x18, 0x18, 0x19, 0x18, 0x10, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x12, 0x12, 0x13, 0x12, 0x10, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x12, 0x12, 0x13, 0x12, 0x10, 0x10, 0x11, 0x10, 0x14, 0x14, 0x15, 0x14, 0x14, 0x14, 0x15, 0x14, 0x16, 0x16, 0x17, 0x16, 0x14, 0x14, 0x15, 0x14, 0x10, 0x10, 0x11, 0x10, 0x10, 0x10, 0x11, 0x10, 0x12, 0x12, 0x13, 0x12, 0x10, 0x10, 0x11, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x06, 0x06, 0x07, 0x06, 0x04, 0x04, 0x05, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x06, 0x06, 0x07, 0x06, 0x04, 0x04, 0x05, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x08, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x0a, 0x0b, 0x0a, 0x08, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x0a, 0x0b, 0x0a, 0x08, 0x08, 0x09, 0x08, 0x0c, 0x0c, 0x0d, 0x0c, 0x0c, 0x0c, 0x0d, 0x0c, 0x0e, 0x0e, 0x0f, 0x0e, 0x0c, 0x0c, 0x0d, 0x0c, 0x08, 0x08, 0x09, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x0a, 0x0b, 0x0a, 0x08, 0x08, 0x09, 0x08, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x04, 0x04, 0x05, 0x04, 0x04, 0x04, 0x05, 0x04, 0x06, 0x06, 0x07, 0x06, 0x04, 0x04, 0x05, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00];
pub global BASE4_ROUND3_DECODE_5BIT_TABLE: [Field; 1024] = [0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07, 0x04, 0x04, 0x05, 0x05, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x08, 0x08, 0x09, 0x09, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f, 0x0c, 0x0c, 0x0d, 0x0d, 0x0c, 0x0c, 0x0d, 0x0d, 0x0e, 0x0e, 0x0f, 0x0f, 0x0e, 0x0e, 0x0f, 0x0f, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x12, 0x12, 0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17, 0x14, 0x14, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x16, 0x16, 0x17, 0x17, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x18, 0x18, 0x19, 0x19, 0x18, 0x18, 0x19, 0x19, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f, 0x1c, 0x1c, 0x1d, 0x1d, 0x1c, 0x1c, 0x1d, 0x1d, 0x1e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1e, 0x1f, 0x1f];

pub global BASE4_POWERS: [Field; 64] = [
    1,
    0x4,
    0x10,
    0x40,
    0x100,
    0x400,
    0x1000,
    0x4000,
    0x10000,
    0x40000,
    0x100000,
    0x400000,
    0x1000000,
    0x4000000,
    0x10000000,
    0x40000000,
    0x100000000,
    0x400000000,
    0x1000000000,
    0x4000000000,
    0x10000000000,
    0x40000000000,
    0x100000000000,
    0x400000000000,
    0x1000000000000,
    0x4000000000000,
    0x10000000000000,
    0x40000000000000,
    0x100000000000000,
    0x400000000000000,
    0x1000000000000000,
    0x4000000000000000,
    0x10000000000000000,
    0x40000000000000000,
    0x100000000000000000,
    0x400000000000000000,
    0x1000000000000000000,
    0x4000000000000000000,
    0x10000000000000000000,
    0x40000000000000000000,
    0x100000000000000000000,
    0x400000000000000000000,
    0x1000000000000000000000,
    0x4000000000000000000000,
    0x10000000000000000000000,
    0x40000000000000000000000,
    0x100000000000000000000000,
    0x400000000000000000000000,
    0x1000000000000000000000000,
    0x4000000000000000000000000,
    0x10000000000000000000000000,
    0x40000000000000000000000000,
    0x100000000000000000000000000,
    0x400000000000000000000000000,
    0x1000000000000000000000000000,
    0x4000000000000000000000000000,
    0x10000000000000000000000000000,
    0x40000000000000000000000000000,
    0x100000000000000000000000000000,
    0x400000000000000000000000000000,
    0x1000000000000000000000000000000,
    0x4000000000000000000000000000000,
    0x10000000000000000000000000000000,
    0x40000000000000000000000000000000,
];
